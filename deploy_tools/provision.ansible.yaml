---

- hosts: all

  # vars_prompt: 
    
  #   - name: host
  #     prompt: Enter url to deploy 

  tasks:

    - name: Print server IP and site URL
      debug: 
        msg: Deploying site {{ host }} on server {{ inventory_hostname }}

    - name: Deadsnakes PPA to get python 3.11 if needed
      apt_repository:
        repo='ppa:deadsnakes/ppa'

    - name: Make sure required packages are installed
      apt: pkg=nginx,git,python3.11,python3.11-venv state=present

    - name: Make site directory if needed
      ansible.builtin.command: mkdir -p /home/{{ ansible_ssh_user }}/sites/{{ host }}

    - name: Get latest source from github
      ansible.builtin.git:
        repo: https://github.com/hfoote/python-tdd-book.git
        dest: /home/{{ ansible_ssh_user }}/sites/{{ host }}
        force: yes
        single_branch: yes
        version: main

    - name: allow long hostnames in nginx
      lineinfile:
        dest=/etc/nginx/nginx.conf
        regexp='(\s+)#? ?server_names_hash_bucket_size'
        backrefs=yes
        line='\1server_names_hash_bucket_size 64;'

    - name: Check if virtualenv exists
      stat:
        path: /home/{{ ansible_ssh_user }}/sites/{{ host }}/virtualenv/bin/pip
      register: venv_pip

    - name: Make virtualenv if required
      ansible.builtin.command: python3.11 -m venv virtualenv
      args:
        chdir: /home/{{ ansible_ssh_user }}/sites/{{ host }}
      when: not venv_pip.stat.exists

    - name: Update virtualenv
      ansible.builtin.command: ./virtualenv/bin/pip3 install -r requirements.txt
      args:
        chdir: /home/{{ ansible_ssh_user }}/sites/{{ host }}

    - name: Create .env if needed
      ansible.builtin.command: touch .env
      args:
        chdir: /home/{{ ansible_ssh_user }}/sites/{{ host }}

    - name: Set DJANGO_DEBUG_FALSE
      lineinfile: 
        dest=/home/{{ ansible_ssh_user }}/sites/{{ host }}/.env
        regexp="^DJANGO_DEBUG_FALSE"
        line="DJANGO_DEBUG_FALSE=y"

    - name: Set SITENAME
      lineinfile: 
        dest=/home/{{ ansible_ssh_user }}/sites/{{ host }}/.env
        regexp="^SITENAME"
        line="SITENAME={{ host }}"

    - name: Generate a new SECRET_KEY 
      ansible.builtin.command: virtualenv/bin/python3.11
      args:
        chdir: /home/{{ ansible_ssh_user }}/sites/{{ host }}
        stdin: | 
          import random 
          print(''.join(random.SystemRandom().choices('abcdefghijklmnopqrstuvwxyz0123456789', k=50)))
      register: keygen

    - name: Add SECRET_KEY to .env
      lineinfile: 
        dest=/home/{{ ansible_ssh_user }}/sites/{{ host }}/.env
        regexp="^DJANGO_SECRET_KEY"
        line="DJANGO_SECRET_KEY={{keygen.stdout}}"

    # - name: Set environment variables from .env file
    #   setup: source /home/{{ ansible_ssh_user }}/sites/{{ host }}/.env

    - name: Collect static files
      ansible.builtin.command: virtualenv/bin/python3.11 manage.py collectstatic --noinput
      args:
        chdir: /home/{{ ansible_ssh_user }}/sites/{{ host }}

    - name: Migrate the database if needed
      ansible.builtin.command: virtualenv/bin/python3.11 manage.py migrate --noinput
      args:
        chdir: /home/{{ ansible_ssh_user }}/sites/{{ host }}

    - name: add nginx config to sites-available
      template: src=./nginx.conf.j2 dest=/etc/nginx/sites-available/{{ host }} 
      notify:
        - restart nginx

    - name: add symlink in nginx sites-enabled
      file:
        src=/etc/nginx/sites-available/{{ host }}
        dest=/etc/nginx/sites-enabled/{{ host }}
        state=link
      notify:
        - restart nginx

    - name: write gunicorn service script
      template:
        src=./gunicorn.service.j2
        dest=/etc/systemd/system/gunicorn-{{ host }}.service
      notify: 
        - restart gunicorn

  handlers:
    - name: restart nginx
      service: 
        name=nginx 
        state=restarted

    - name: restart gunicorn
      systemd_service:
        name=gunicorn-{{ host }}.service
        daemon_reload=yes
        enabled=true
        state=reloaded
